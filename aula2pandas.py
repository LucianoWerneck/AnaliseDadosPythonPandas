# -*- coding: utf-8 -*-
"""Aula2Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ch5sJ51kyHZs1An5IFKD2miZUCCt4aCp
"""

#importando a biblioteca
import pandas as pd

#leitura dos arquivos
df1 = pd.read_excel('Aracaju.xlsx')
df2 = pd.read_excel('Fortaleza.xlsx')
df3 = pd.read_excel('Natal.xlsx')
df4 = pd.read_excel('Recife.xlsx')
df5 = pd.read_excel('Salvador.xlsx')

#juntando todos os arquivos
df = pd.concat([df1,df2,df3,df4,df5])

df.sample(5)

df.dtypes

#alterandoo tipo de dado da coluna LojaID
df['LojaID'] = df['LojaID'].astype('object')

df.dtypes

#consultando linhas com valores faltantes
df.isnull().sum()

#substituindo os valores nulos pela média
df['Vendas'].fillna(df['Vendas'].mean(), inplace=True)

df['Vendas'].mean()

#apagando as linhas com valores nulos
df.dropna(inplace=True)

#apagando as linha com valores nulos com base apenas em 1 coluna
df.dropna(subset=['Vendas'], inplace=True)

#removendo linhas que estejam com valores falatando em tds as colunas
df.dropna(how='all', inplace=True)

#criando uma coluna
df['Receita'] = df['Vendas'].mul(df['Qtde'])

#retorna maior receita
df['Receita'].max()

#retorna menor recieta 
df['Receita'].min()

#retorna os 3 maiores dados da coluna
df.nlargest(3, 'Receita')

#retorna os 3 menores dados da coluna
df.nsmallest(3, 'Receita')

#agrupamento por cidade
df.groupby('Cidade')['Receita'].sum()

#ordenando o conjunto de dados
df.sort_values('Receita', ascending=False).head(10)

"""# Trabalhando com Datas"""

#transformando a coluna de data em tipo inteiro
df['Data'] = df['Data'].astype('int64')

#verificando o tipo de dado de cada coluna
df.dtypes

#tranformando coluna de data em data
df['Data'] = pd.to_datetime(df['Data'])

#agrupamento por ano
df.groupby(df['Data'].dt.year)['Receita'].sum()

#criando um nova coluna com ano
df['Ano_Venda'] = df['Data'].dt.year

df.sample(5)

#extraindo o mês e o dia
df['mes_venda'], df['dia_venda'] = (df['Data'].dt.month, df['Data'].dt.day)

df.sample(5)

#retornando a data mais antiga
df['Data'].min()

#calculando a diferença de dias 
df['diferença_dias'] = df['Data'] - df['Data'].min()

#filtrando as vendas de 2019 do mês de março
vendas_marco_19 = df.loc[(df['Data'].dt.year == 2019) & (df['Data'].dt.month == 3)]

vendas_marco_19.sample(20)

"""# Visualização de Dados"""

df['LojaID'].value_counts(ascending=False)

#grafico de barras
df['LojaID'].value_counts(ascending=False).plot.bar()

#grafico de barras horizontais
df['LojaID'].value_counts(ascending=True).plot.barh();

#grafico de Pizza
df.groupby(df['Data'].dt.year)['Receita'].sum().plot.pie();

#total vendas por cidade
df['Cidade'].value_counts()

#adicionando um titulo e aterando o nome dos eixos
import matplotlib.pyplot as plt
df['Cidade'].value_counts().plot.bar(title='Total vendas por Cidade')
plt.xlabel('Cidade')
plt.ylabel('Total Vendas')

#alterando a cor
df['Cidade'].value_counts().plot.bar(title='Total vendas po Cidade', color='gold')
plt.xlabel('Cidade')
plt.ylabel('Total Vendas')

#alterando o estilo
plt.style.use('ggplot')

df.groupby(df['mes_venda'])['Qtde'].sum().plot(title='Total Produtos Vendidos Mês', color='red')
plt.xlabel('Mês')
plt.ylabel('Total Produtos Vendidos')
plt.legend();